name: Automated Merging between branches

on: 
  pull_request: 
    branches: 
      - merge
    types: 
      - closed

jobs:
  merge_and_tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Hace el checkout del repositorio para bajar el código de todas las ramas
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Obtiene las credenciales del autor del PR para poder asignárselas a los commits del workflow
      - name: Set up Git User with PR author details
        run: |
          git config user.name "${{ github.event.pull_request.user.login }}"
          git config user.email "${{ github.event.pull_request.user.email }}"

      # Asegurar que merge y release están actualizadas antes de la fusión
      - name: Merge merge into release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout merge
          git pull origin merge
          git checkout release
          git pull origin release
          git merge merge
          git push origin release

      # Genera una versión basada en la fecha y hora actual
      - name: Generate version
        id: version
        run: echo "VERSION=v$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # Crea un tag para la nueva versión (evita duplicados)
      - name: Create tag for new version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists, skipping..."
          else
            git tag $VERSION
            git push origin $VERSION
          fi

      # Actualiza la rama main
      - name: Checkout main branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout main
          git pull origin main

      # Verifica si hay diferencias entre release y main
      - name: Check for differences between release and main
        id: check-diff
        run: |
          git fetch origin release main
          if git diff --quiet origin/main..origin/release; then
            echo "has_diff=false" >> $GITHUB_ENV
          else
            echo "has_diff=true" >> $GITHUB_ENV
          fi

      # Crea un PR de release a main si hay diferencias
      - name: Create Pull Request from release to main
        if: steps.check-diff.outputs.has_diff == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release
          base: main
          title: 'Sync release with main'
          body: 'Automated pull request to sync release branch with main.'
          labels: 'automated-pull-request'
